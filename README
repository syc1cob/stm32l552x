The STM32L552x series (part of the STM32L5 family from STMicroelectronics) is based on the Arm® Cortex®-M33 core with TrustZone® technology. Here's a general overview of its memory regions. Specific sizes and addresses may vary slightly depending on the exact variant (e.g., STM32L552CE, STM32L552ZE, etc.).

TrustZone Memory Partitioning
If using TrustZone, memory can be divided into:
  Secure: Trusted code/data. Only secure code can access.
  Non-secure: Untrusted application code. Cannot access secure memory or peripherals
  Non-secure callable : A special secure region designed to allow non-secure code to call into secure functions (via "secure gateways").
This applies to Flash and SRAM regions, which can be configured via SAU (Security Attribution Unit) and GTZC (Global TrustZone Controller).

Key Differences
Feature                	    Non-secure (NS)                          	Non-secure Callable (NSC)
Memory location	          Typically Flash or RAM	                Small part of Secure Flash (defined in SAU + linker)
Access by non-secure	    Fully accessible	                      Callable only via SG (Secure Gateway) instructions
Execution from NS side	  Yes	                                    Only through special SG function calls
Purpose	                  Main app space for non-secure code	    Gateway for non-secure → secure calls (e.g., secure services)
Security level	          Non-secure	                            Physically secure, but marked "callable" by NS

TrustZone Configuration (Optional)
You can configure Flash and SRAM2 to be:
Secure, Non-secure, Non-secure callable
Using:
SAU (Security Attribution Unit) – part of the Arm Cortex-M33
GTZC (Global TrustZone Controller) – peripheral and memory region configuration

Example Use Case
Imagine a secure function:
__attribute__((cmse_nonsecure_entry))
void secure_led_on(void) {
    // secure code to toggle LED
}
This function resides in an NSC region, marked with cmse_nonsecure_entry.
A non-secure app can call it safely via the SG instruction, which jumps into the secure world using an entry point defined in the NSC area.

Why Not Just Make Everything NSC?
Security risk: NSC regions are still part of secure memory but exposed to non-secure calls — so the surface area should be minimized.
You only put trusted, validated entry points in NSC.

GTZC controller in STM32L552
The GTZC (Global TrustZone Controller) in the STM32L552 plays a central role in enforcing TrustZone security at the peripheral and memory level.
It works together with the SAU (Security Attribution Unit) to:
Mark peripherals and SRAM regions as secure or non-secure
Control illegal access with interrupts and flags
Purpose:
To control secure vs non-secure access to:
  Peripherals
  SRAM2 memory blocks
  Flash memory (in cooperation with SAU and option bytes)
GTZC Components
1. MPCBB (Memory Protection Controller Block-Based)
Controls SRAM2 block-wise security.
Each block (512 bytes) can be marked as:
  Secure
  Non-secure
SRAM2 Example with MPCBB
  // All SRAM2 marked as secure
  GTZC_MPCBB2->SECCFGR[0] = 0xFFFFFFFF;
  GTZC_MPCBB2->SECCFGR[1] = 0xFFFFFFFF;  // Each bit marks a 512B block as Secure (1) or Non-secure (0)
2. TZSC (TrustZone Security Controller)
Controls peripheral access.
You configure whether a peripheral is secure or non-secure.
Example: Configure a Peripheral as Secure
// Make GPIOA secure
GTZC_TZSC->SECCFGR2 |= GTZC_TZSC_SECCFGR2_GPIOASEC;
GTZC_TZSC->SECCFGR1 |= GTZC_TZSC_SECCFGR1_USART1SEC_Msk; // Make USART1 Secure
3. Illegal Access Detection
GTZC can trigger interrupts if non-secure code tries to access secure resources.
Use:
  GTZC_TZIC (TrustZone Interrupt Controller)
  Flags in GTZC_TZIC->SRx
Example: Runtime Detection (GTZC_TZIC) To detect illegal access:
if (GTZC_TZIC->SR1 & GTZC_TZIC_SR1_USART1F) {
    // Handle unauthorized access to USART1
    GTZC_TZIC->SR1 |= GTZC_TZIC_SR1_USART1F;  // Clear flag
}
GTZC complements SAU: SAU defines secure/non-secure memory regions globally, while GTZC adds fine-grained protection for SRAM and peripherals.
GTZC settings are persistent only if set during secure initialization.
Always configure GTZC from secure firmware (e.g., during system boot from the secure world).





